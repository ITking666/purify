#include "catch.hpp"
#include "MeasurementOperator.h"
#include <iostream>

using namespace purify;

TEST_CASE("Measurement Operator [Kernels]", "[Kernels]") {
  MeasurementOperator op;;
  t_real x_values[] = {-3,-2.99000000000000,-2.98000000000000,-2.97000000000000,-2.96000000000000,-2.95000000000000,-2.94000000000000,-2.93000000000000,-2.92000000000000,-2.91000000000000,-2.90000000000000,-2.89000000000000,-2.88000000000000,-2.87000000000000,-2.86000000000000,-2.85000000000000,-2.84000000000000,-2.83000000000000,-2.82000000000000,-2.81000000000000,-2.80000000000000,-2.79000000000000,-2.78000000000000,-2.77000000000000,-2.76000000000000,-2.75000000000000,-2.74000000000000,-2.73000000000000,-2.72000000000000,-2.71000000000000,-2.70000000000000,-2.69000000000000,-2.68000000000000,-2.67000000000000,-2.66000000000000,-2.65000000000000,-2.64000000000000,-2.63000000000000,-2.62000000000000,-2.61000000000000,-2.60000000000000,-2.59000000000000,-2.58000000000000,-2.57000000000000,-2.56000000000000,-2.55000000000000,-2.54000000000000,-2.53000000000000,-2.52000000000000,-2.51000000000000,-2.50000000000000,-2.49000000000000,-2.48000000000000,-2.47000000000000,-2.46000000000000,-2.45000000000000,-2.44000000000000,-2.43000000000000,-2.42000000000000,-2.41000000000000,-2.40000000000000,-2.39000000000000,-2.38000000000000,-2.37000000000000,-2.36000000000000,-2.35000000000000,-2.34000000000000,-2.33000000000000,-2.32000000000000,-2.31000000000000,-2.30000000000000,-2.29000000000000,-2.28000000000000,-2.27000000000000,-2.26000000000000,-2.25000000000000,-2.24000000000000,-2.23000000000000,-2.22000000000000,-2.21000000000000,-2.20000000000000,-2.19000000000000,-2.18000000000000,-2.17000000000000,-2.16000000000000,-2.15000000000000,-2.14000000000000,-2.13000000000000,-2.12000000000000,-2.11000000000000,-2.10000000000000,-2.09000000000000,-2.08000000000000,-2.07000000000000,-2.06000000000000,-2.05000000000000,-2.04000000000000,-2.03000000000000,-2.02000000000000,-2.01000000000000,-2,-1.99000000000000,-1.98000000000000,-1.97000000000000,-1.96000000000000,-1.95000000000000,-1.94000000000000,-1.93000000000000,-1.92000000000000,-1.91000000000000,-1.90000000000000,-1.89000000000000,-1.88000000000000,-1.87000000000000,-1.86000000000000,-1.85000000000000,-1.84000000000000,-1.83000000000000,-1.82000000000000,-1.81000000000000,-1.80000000000000,-1.79000000000000,-1.78000000000000,-1.77000000000000,-1.76000000000000,-1.75000000000000,-1.74000000000000,-1.73000000000000,-1.72000000000000,-1.71000000000000,-1.70000000000000,-1.69000000000000,-1.68000000000000,-1.67000000000000,-1.66000000000000,-1.65000000000000,-1.64000000000000,-1.63000000000000,-1.62000000000000,-1.61000000000000,-1.60000000000000,-1.59000000000000,-1.58000000000000,-1.57000000000000,-1.56000000000000,-1.55000000000000,-1.54000000000000,-1.53000000000000,-1.52000000000000,-1.51000000000000,-1.50000000000000,-1.49000000000000,-1.48000000000000,-1.47000000000000,-1.46000000000000,-1.45000000000000,-1.44000000000000,-1.43000000000000,-1.42000000000000,-1.41000000000000,-1.40000000000000,-1.39000000000000,-1.38000000000000,-1.37000000000000,-1.36000000000000,-1.35000000000000,-1.34000000000000,-1.33000000000000,-1.32000000000000,-1.31000000000000,-1.30000000000000,-1.29000000000000,-1.28000000000000,-1.27000000000000,-1.26000000000000,-1.25000000000000,-1.24000000000000,-1.23000000000000,-1.22000000000000,-1.21000000000000,-1.20000000000000,-1.19000000000000,-1.18000000000000,-1.17000000000000,-1.16000000000000,-1.15000000000000,-1.14000000000000,-1.13000000000000,-1.12000000000000,-1.11000000000000,-1.10000000000000,-1.09000000000000,-1.08000000000000,-1.07000000000000,-1.06000000000000,-1.05000000000000,-1.04000000000000,-1.03000000000000,-1.02000000000000,-1.01000000000000,-1,-0.990000000000000,-0.980000000000000,-0.970000000000000,-0.960000000000000,-0.950000000000000,-0.940000000000000,-0.930000000000000,-0.920000000000000,-0.910000000000000,-0.900000000000000,-0.890000000000000,-0.880000000000000,-0.870000000000000,-0.860000000000000,-0.850000000000000,-0.840000000000000,-0.830000000000000,-0.820000000000000,-0.810000000000000,-0.800000000000000,-0.790000000000000,-0.780000000000000,-0.770000000000000,-0.760000000000000,-0.750000000000000,-0.740000000000000,-0.730000000000000,-0.720000000000000,-0.710000000000000,-0.700000000000000,-0.690000000000000,-0.680000000000000,-0.670000000000000,-0.660000000000000,-0.650000000000000,-0.640000000000000,-0.630000000000000,-0.620000000000000,-0.610000000000000,-0.600000000000000,-0.590000000000000,-0.580000000000000,-0.570000000000000,-0.560000000000000,-0.550000000000000,-0.540000000000000,-0.530000000000000,-0.520000000000000,-0.510000000000000,-0.500000000000000,-0.490000000000000,-0.480000000000000,-0.470000000000000,-0.460000000000000,-0.450000000000000,-0.440000000000000,-0.430000000000000,-0.420000000000000,-0.410000000000000,-0.400000000000000,-0.390000000000000,-0.380000000000000,-0.370000000000000,-0.360000000000000,-0.350000000000000,-0.340000000000000,-0.330000000000000,-0.320000000000000,-0.310000000000000,-0.300000000000000,-0.290000000000000,-0.280000000000000,-0.270000000000000,-0.260000000000000,-0.250000000000000,-0.240000000000000,-0.230000000000000,-0.220000000000000,-0.210000000000000,-0.200000000000000,-0.190000000000000,-0.180000000000000,-0.170000000000000,-0.160000000000000,-0.150000000000000,-0.140000000000000,-0.130000000000000,-0.120000000000000,-0.110000000000000,-0.100000000000000,-0.0899999999999999,-0.0800000000000001,-0.0699999999999998,-0.0600000000000001,-0.0499999999999998,-0.0400000000000000,-0.0299999999999998,-0.0200000000000000,-0.00999999999999979,0,0.00999999999999979,0.0200000000000000,0.0299999999999998,0.0400000000000000,0.0499999999999998,0.0600000000000001,0.0699999999999998,0.0800000000000001,0.0899999999999999,0.100000000000000,0.110000000000000,0.120000000000000,0.130000000000000,0.140000000000000,0.150000000000000,0.160000000000000,0.170000000000000,0.180000000000000,0.190000000000000,0.200000000000000,0.210000000000000,0.220000000000000,0.230000000000000,0.240000000000000,0.250000000000000,0.260000000000000,0.270000000000000,0.280000000000000,0.290000000000000,0.300000000000000,0.310000000000000,0.320000000000000,0.330000000000000,0.340000000000000,0.350000000000000,0.360000000000000,0.370000000000000,0.380000000000000,0.390000000000000,0.400000000000000,0.410000000000000,0.420000000000000,0.430000000000000,0.440000000000000,0.450000000000000,0.460000000000000,0.470000000000000,0.480000000000000,0.490000000000000,0.500000000000000,0.510000000000000,0.520000000000000,0.530000000000000,0.540000000000000,0.550000000000000,0.560000000000000,0.570000000000000,0.580000000000000,0.590000000000000,0.600000000000000,0.610000000000000,0.620000000000000,0.630000000000000,0.640000000000000,0.650000000000000,0.660000000000000,0.670000000000000,0.680000000000000,0.690000000000000,0.700000000000000,0.710000000000000,0.720000000000000,0.730000000000000,0.740000000000000,0.750000000000000,0.760000000000000,0.770000000000000,0.780000000000000,0.790000000000000,0.800000000000000,0.810000000000000,0.820000000000000,0.830000000000000,0.840000000000000,0.850000000000000,0.860000000000000,0.870000000000000,0.880000000000000,0.890000000000000,0.900000000000000,0.910000000000000,0.920000000000000,0.930000000000000,0.940000000000000,0.950000000000000,0.960000000000000,0.970000000000000,0.980000000000000,0.990000000000000,1,1.01000000000000,1.02000000000000,1.03000000000000,1.04000000000000,1.05000000000000,1.06000000000000,1.07000000000000,1.08000000000000,1.09000000000000,1.10000000000000,1.11000000000000,1.12000000000000,1.13000000000000,1.14000000000000,1.15000000000000,1.16000000000000,1.17000000000000,1.18000000000000,1.19000000000000,1.20000000000000,1.21000000000000,1.22000000000000,1.23000000000000,1.24000000000000,1.25000000000000,1.26000000000000,1.27000000000000,1.28000000000000,1.29000000000000,1.30000000000000,1.31000000000000,1.32000000000000,1.33000000000000,1.34000000000000,1.35000000000000,1.36000000000000,1.37000000000000,1.38000000000000,1.39000000000000,1.40000000000000,1.41000000000000,1.42000000000000,1.43000000000000,1.44000000000000,1.45000000000000,1.46000000000000,1.47000000000000,1.48000000000000,1.49000000000000,1.50000000000000,1.51000000000000,1.52000000000000,1.53000000000000,1.54000000000000,1.55000000000000,1.56000000000000,1.57000000000000,1.58000000000000,1.59000000000000,1.60000000000000,1.61000000000000,1.62000000000000,1.63000000000000,1.64000000000000,1.65000000000000,1.66000000000000,1.67000000000000,1.68000000000000,1.69000000000000,1.70000000000000,1.71000000000000,1.72000000000000,1.73000000000000,1.74000000000000,1.75000000000000,1.76000000000000,1.77000000000000,1.78000000000000,1.79000000000000,1.80000000000000,1.81000000000000,1.82000000000000,1.83000000000000,1.84000000000000,1.85000000000000,1.86000000000000,1.87000000000000,1.88000000000000,1.89000000000000,1.90000000000000,1.91000000000000,1.92000000000000,1.93000000000000,1.94000000000000,1.95000000000000,1.96000000000000,1.97000000000000,1.98000000000000,1.99000000000000,2,2.01000000000000,2.02000000000000,2.03000000000000,2.04000000000000,2.05000000000000,2.06000000000000,2.07000000000000,2.08000000000000,2.09000000000000,2.10000000000000,2.11000000000000,2.12000000000000,2.13000000000000,2.14000000000000,2.15000000000000,2.16000000000000,2.17000000000000,2.18000000000000,2.19000000000000,2.20000000000000,2.21000000000000,2.22000000000000,2.23000000000000,2.24000000000000,2.25000000000000,2.26000000000000,2.27000000000000,2.28000000000000,2.29000000000000,2.30000000000000,2.31000000000000,2.32000000000000,2.33000000000000,2.34000000000000,2.35000000000000,2.36000000000000,2.37000000000000,2.38000000000000,2.39000000000000,2.40000000000000,2.41000000000000,2.42000000000000,2.43000000000000,2.44000000000000,2.45000000000000,2.46000000000000,2.47000000000000,2.48000000000000,2.49000000000000,2.50000000000000,2.51000000000000,2.52000000000000,2.53000000000000,2.54000000000000,2.55000000000000,2.56000000000000,2.57000000000000,2.58000000000000,2.59000000000000,2.60000000000000,2.61000000000000,2.62000000000000,2.63000000000000,2.64000000000000,2.65000000000000,2.66000000000000,2.67000000000000,2.68000000000000,2.69000000000000,2.70000000000000,2.71000000000000,2.72000000000000,2.73000000000000,2.74000000000000,2.75000000000000,2.76000000000000,2.77000000000000,2.78000000000000,2.79000000000000,2.80000000000000,2.81000000000000,2.82000000000000,2.83000000000000,2.84000000000000,2.85000000000000,2.86000000000000,2.87000000000000,2.88000000000000,2.89000000000000,2.90000000000000,2.91000000000000,2.92000000000000,2.93000000000000,2.94000000000000,2.95000000000000,2.96000000000000,2.97000000000000,2.98000000000000,2.99000000000000,3};
  t_real pswf_values[] = {0,2.86633764298305e-05,6.10846400522510e-05,9.74867114534197e-05,0.000138099275436011,0.000183158834715579,0.000232908759839985,0.000287599335260365,0.000347487801482491,0.000412838393227599,0.000483922373532247,0.000561018063717058,0.000644410869154929,0.000734393300769595,0.000831264992196336,0.000935332712537120,0.00104691037464341,0.00116631903886053,0.00129388691216873,0.00142994934265658,0.00157484880926400,0.00172893490673290,0.00189256432570485,0.00206610082790644,0.00224991521636458,0.00244438530059500,0.00264989585670940,0.00286683858238768,0.00309561204666389,0.00333662163447619,0.00359027948593289,0.00385700443024882,0.00413722191430810,0.00443136392581194,0.00473986891097181,0.00506318168671114,0.00540175334734086,0.00575604116567666,0.00612650848856852,0.00651362462681571,0.00691786473944308,0.00733970971231783,0.00777964603108813,0.00823816564842889,0.00871576584558228,0.00921294908818468,0.00973022287637387,0.0102680995891754,0.0108270963231686,0.0114077347254377,0.0120105408208164,0.0126360448334390,0.0132847810026130,0.0139572873930336,0.0146541056993654,0.0153757810452170,0.0161228617765427,0.0168958992495060,0.0176954476128461,0.0185220635847929,0.0193763062245777,0.0202587366985953,0.0211699180412740,0.0221104149107163,0.0230807933391785,0.0240816204784586,0.0251134643402719,0.0261768935316915,0.0272724769857440,0.0284007836872455,0.0295623823939785,0.0307578413533050,0.0319877280143243,0.0332526087356823,0.0345530484891478,0.0358896256250000,0.0372628731910778,0.0386733693229407,0.0401216707418761,0.0416083313712472,0.0431339020245731,0.0446989300905778,0.0463039592153665,0.0479495289818953,0.0496361745868978,0.0513644265154379,0.0531348102132585,0.0549478457571002,0.0568040475231635,0.0587039238538933,0.0606479767232639,0.0626367014007467,0.0646705861141433,0.0667501117114703,0.0688757513220816,0.0710479700172189,0.0732672244701787,0.0755339626162902,0.0778486233128962,0.0802116359995324,0.0826234203585025,0.0850843859760454,0.0875949320042938,0.0901554468242243,0.0927663077097996,0.0954278804935044,0.0981405192334776,0.100904565882443,0.103720349958646,0.106588188218989,0.109508384334590,0.112481228568947,0.115506997458931,0.118585953498792,0.121718344827413,0.124904404918983,0.128144352277314,0.131438390134002,0.134786706150630,0.138189472125222,0.141646843703139,0.145158960092630,0.148725943785234,0.152347900281221,0.156024917820285,0.159757067117674,0.163544401105951,0.167386954682584,0.171284744463553,0.175237768543162,0.179246006260240,0.183309417970919,0.187427944828171,0.191601508568284,0.195830011304447,0.200113335327629,0.204451342914916,0.208843876145476,0.213290756724322,0.217791785814026,0.222346743874551,0.226955390511359,0.231617464331931,0.236332682810872,0.241100742163720,0.245921317229620,0.250794061362988,0.255718606334302,0.260694562240146,0.265721517422636,0.270799038398339,0.275926669796807,0.281103934308841,0.286330332644570,0.291605343501472,0.296928423542418,0.302299007383825,0.307716507594023,0.313180314701895,0.318689797215877,0.324244301653390,0.329843152580757,0.335485652663674,0.341171082728286,0.346898701832912,0.352667747350463,0.358477435061591,0.364326959258596,0.370215492860113,0.376142187536609,0.382106173846686,0.388106561384206,0.394142438936235,0.400212874651809,0.406316916221489,0.412453591067706,0.418621906545869,0.424820850156189,0.431049389766206,0.437306473843954,0.443591031701730,0.449901973750396,0.456238191764172,0.462598559155827,0.468981931262213,0.475387145640055,0.481813022371900,0.488258364382151,0.494721957763063,0.501202572110616,0.507698960870139,0.514209861691576,0.520733996794259,0.527270073341071,0.533816783821854,0.540372806445917,0.546936805543511,0.553507431976100,0.560083323555276,0.566663105470158,0.573245390723099,0.579828780573518,0.586411864989690,0.592993223108302,0.599571423701575,0.606145025651764,0.612712578432832,0.619272622599090,0.625823690280586,0.632364305685044,0.638892985606103,0.645408239937661,0.651908572194071,0.658392480035969,0.664858455801489,0.671304987042621,0.677730557066477,0.684133645481194,0.690512728746252,0.696866280726914,0.703192773252561,0.709490676678633,0.715758460451928,0.721994593678982,0.728197545697252,0.734365786648846,0.740497788056505,0.746592023401566,0.752646968703630,0.758661103101640,0.764632909436099,0.770560874832130,0.776443491283096,0.782279256234493,0.788066673167824,0.793804252184162,0.799490510587115,0.805123973464901,0.810703174271229,0.816226655404721,0.821692968786546,0.827100676436013,0.832448351043794,0.837734576542518,0.842957948674420,0.848117075555774,0.853210578237811,0.858237091263836,0.863195263222258,0.868083757295261,0.872901251802801,0.877646440741690,0.882318034319456,0.886914759482714,0.891435360439777,0.895878599177233,0.900243255970207,0.904528129886074,0.908732039281311,0.912853822291283,0.916892337312664,0.920846463478258,0.924715101123971,0.928497172247691,0.932191620959817,0.935797413925227,0.939313540796430,0.942739014637679,0.946072872339833,0.949314175025725,0.952462008445847,0.955515483364125,0.958473735933589,0.961335928061722,0.964101247765328,0.966768909514690,0.969338154566861,0.971808251287910,0.974178495463931,0.976448210600678,0.978616748211639,0.980683488094415,0.982647838595249,0.984509236861565,0.986267149082369,0.987921070716417,0.989470526707983,0.990915071690158,0.992254290175525,0.993487796734152,0.994615236158772,0.995636283617083,0.996550644791080,0.997358056003338,0.998058284330194,0.998651127701744,0.999136414988631,0.999514006075548,0.999783791921433,0.999945694606328,0.999999667364857,0.999945694606328,0.999783791921433,0.999514006075548,0.999136414988631,0.998651127701744,0.998058284330194,0.997358056003338,0.996550644791080,0.995636283617083,0.994615236158772,0.993487796734152,0.992254290175525,0.990915071690158,0.989470526707983,0.987921070716417,0.986267149082369,0.984509236861565,0.982647838595249,0.980683488094415,0.978616748211639,0.976448210600678,0.974178495463931,0.971808251287910,0.969338154566861,0.966768909514690,0.964101247765328,0.961335928061722,0.958473735933589,0.955515483364125,0.952462008445847,0.949314175025725,0.946072872339833,0.942739014637679,0.939313540796430,0.935797413925227,0.932191620959817,0.928497172247691,0.924715101123971,0.920846463478258,0.916892337312664,0.912853822291283,0.908732039281311,0.904528129886074,0.900243255970207,0.895878599177233,0.891435360439777,0.886914759482714,0.882318034319456,0.877646440741690,0.872901251802801,0.868083757295261,0.863195263222258,0.858237091263836,0.853210578237811,0.848117075555774,0.842957948674420,0.837734576542518,0.832448351043794,0.827100676436013,0.821692968786546,0.816226655404721,0.810703174271229,0.805123973464901,0.799490510587115,0.793804252184162,0.788066673167824,0.782279256234493,0.776443491283096,0.770560874832130,0.764632909436099,0.758661103101640,0.752646968703630,0.746592023401566,0.740497788056505,0.734365786648846,0.728197545697252,0.721994593678982,0.715758460451928,0.709490676678633,0.703192773252561,0.696866280726914,0.690512728746252,0.684133645481194,0.677730557066477,0.671304987042621,0.664858455801489,0.658392480035969,0.651908572194071,0.645408239937661,0.638892985606103,0.632364305685044,0.625823690280586,0.619272622599090,0.612712578432832,0.606145025651764,0.599571423701575,0.592993223108302,0.586411864989690,0.579828780573518,0.573245390723099,0.566663105470158,0.560083323555276,0.553507431976100,0.546936805543511,0.540372806445917,0.533816783821854,0.527270073341071,0.520733996794259,0.514209861691576,0.507698960870139,0.501202572110616,0.494721957763063,0.488258364382151,0.481813022371900,0.475387145640055,0.468981931262213,0.462598559155827,0.456238191764172,0.449901973750396,0.443591031701730,0.437306473843954,0.431049389766206,0.424820850156189,0.418621906545869,0.412453591067706,0.406316916221489,0.400212874651809,0.394142438936235,0.388106561384206,0.382106173846686,0.376142187536609,0.370215492860113,0.364326959258596,0.358477435061591,0.352667747350463,0.346898701832912,0.341171082728286,0.335485652663674,0.329843152580757,0.324244301653390,0.318689797215877,0.313180314701895,0.307716507594023,0.302299007383825,0.296928423542418,0.291605343501472,0.286330332644570,0.281103934308841,0.275926669796807,0.270799038398339,0.265721517422636,0.260694562240146,0.255718606334302,0.250794061362988,0.245921317229620,0.241100742163720,0.236332682810872,0.231617464331931,0.226955390511359,0.222346743874551,0.217791785814026,0.213290756724322,0.208843876145476,0.204451342914916,0.200113335327629,0.195830011304447,0.191601508568284,0.187427944828171,0.183309417970919,0.179246006260240,0.175237768543162,0.171284744463553,0.167386954682584,0.163544401105951,0.159757067117674,0.156024917820285,0.152347900281221,0.148725943785234,0.145158960092630,0.141646843703139,0.138189472125222,0.134786706150630,0.131438390134002,0.128144352277314,0.124904404918983,0.121718344827413,0.118585953498792,0.115506997458931,0.112481228568947,0.109508384334590,0.106588188218989,0.103720349958646,0.100904565882443,0.0981405192334776,0.0954278804935044,0.0927663077097996,0.0901554468242243,0.0875949320042938,0.0850843859760454,0.0826234203585025,0.0802116359995324,0.0778486233128962,0.0755339626162902,0.0732672244701787,0.0710479700172189,0.0688757513220816,0.0667501117114703,0.0646705861141433,0.0626367014007467,0.0606479767232639,0.0587039238538933,0.0568040475231635,0.0549478457571002,0.0531348102132585,0.0513644265154379,0.0496361745868978,0.0479495289818953,0.0463039592153665,0.0446989300905778,0.0431339020245731,0.0416083313712472,0.0401216707418761,0.0386733693229407,0.0372628731910778,0.0358896256250000,0.0345530484891478,0.0332526087356823,0.0319877280143243,0.0307578413533050,0.0295623823939785,0.0284007836872455,0.0272724769857440,0.0261768935316915,0.0251134643402719,0.0240816204784586,0.0230807933391785,0.0221104149107163,0.0211699180412740,0.0202587366985953,0.0193763062245777,0.0185220635847929,0.0176954476128461,0.0168958992495060,0.0161228617765427,0.0153757810452170,0.0146541056993654,0.0139572873930336,0.0132847810026130,0.0126360448334390,0.0120105408208164,0.0114077347254377,0.0108270963231686,0.0102680995891754,0.00973022287637387,0.00921294908818468,0.00871576584558228,0.00823816564842889,0.00777964603108813,0.00733970971231783,0.00691786473944308,0.00651362462681571,0.00612650848856852,0.00575604116567666,0.00540175334734086,0.00506318168671114,0.00473986891097181,0.00443136392581194,0.00413722191430810,0.00385700443024882,0.00359027948593289,0.00333662163447619,0.00309561204666389,0.00286683858238768,0.00264989585670940,0.00244438530059500,0.00224991521636458,0.00206610082790644,0.00189256432570485,0.00172893490673290,0.00157484880926400,0.00142994934265658,0.00129388691216873,0.00116631903886053,0.00104691037464341,0.000935332712537120,0.000831264992196336,0.000734393300769595,0.000644410869154929,0.000561018063717058,0.000483922373532247,0.000412838393227599,0.000347487801482491,0.000287599335260365,0.000232908759839985,0.000183158834715579,0.000138099275436011,9.74867114534197e-05,6.10846400522510e-05,2.86633764298305e-05,0};
  t_real kb_values[] = {7.43469443502669e-06,1.00805758527258e-05,1.31611100296223e-05,1.67204973730424e-05,2.08059363905017e-05,2.54677549797957e-05,3.07595444911051e-05,3.67382965053836e-05,4.34645422677190e-05,5.10024947086680e-05,5.94201929808341e-05,6.87896494321026e-05,7.91869989310889e-05,9.06926504543629e-05,0.000103391440839045,0.000117372790598282,0.000132730861691048,0.000149564717131562,0.000167978482317502,0.000188081507949999,0.000209988534412247,0.000233819857467383,0.000259701495130145,0.000287765355560641,0.000318149405822505,0.000350997841341567,0.000386461255895199,0.000424696811956460,0.000465868411211272,0.000510146865061051,0.000557710064917393,0.000608743152089792,0.000663438687061795,0.000721996817945560,0.000784625447899411,0.000851540401287862,0.000922965588358437,0.000999133168204828,0.00108028370978106,0.00116666635072691,0.00125853895376027,0.00135616826038822,0.00145983004168424,0.00156980924587551,0.00168640014248058,0.00180990646273441,0.00194064153603439,0.00207892842213892,0.00222510003884643,0.00237949928488150,0.00254247915771185,0.00271440286601900,0.00289564393654305,0.00308658631502198,0.00328762446094390,0.00349916343583111,0.00372161898477411,0.00395541761093375,0.00420099664273084,0.00445880429344256,0.00472929971292675,0.00501295303119638,0.00531024539356870,0.00562166898711538,0.00594772705814315,0.00628893392043690,0.00664581495400105,0.00701890659403844,0.00740875630991058,0.00781592257382674,0.00824097481901578,0.00868449338713837,0.00914706946470409,0.00962930500826366,0.0101318126581527,0.0106552156405711,0.0112001476577889,0.0117672527662767,0.0123571852425686,0.0129706094366715,0.0136081996128458,0.0142706397775905,0.0149586234946749,0.0156728536870719,0.0164140424256529,0.0171829107045218,0.0179801882028699,0.0188066130332503,0.0196629314761796,0.0205498977009858,0.0214682734728370,0.0224188278458950,0.0234023368425520,0.0244195831187241,0.0254713556151832,0.0265584491949310,0.0276816642666247,0.0288418063940844,0.0300396858919227,0.0312761174073554,0.0325519194882648,0.0338679141376024,0.0352249263542347,0.0366237836603505,0.0380653156155631,0.0395503533178591,0.0410797288915580,0.0426542749624655,0.0442748241204196,0.0459422083694431,0.0476572585657329,0.0494208038437357,0.0512336710305704,0.0530966840490786,0.0550106633098010,0.0569764250921886,0.0589947809153793,0.0610665368988864,0.0631924931135554,0.0653734429231685,0.0676101723170910,0.0699034592343620,0.0722540728796589,0.0746627730315699,0.0771303093436293,0.0796574206385861,0.0822448341963846,0.0848932650363573,0.0876034151941392,0.0903759729938291,0.0932116123159342,0.0961109918616499,0.0990747544140367,0.102103526096669,0.105197915630347,0.108358513588461,0.111585891651624,0.114880601862191,0.118243175879295,0.121674124235024,0.125173935592412,0.128743076005881,0.132381988184787,0.136091090760777,0.139870777559591,0.143721416878019,0.147643350766696,0.151636894319412,0.155702334969659,0.159839931795092,0.164049914830625,0.168332484390842,0.172687810402464,0.177116031747545,0.181617255618122,0.186191556883019,0.190838977467515,0.195559525746569,0.200353175952304,0.205219867596454,0.210159504908447,0.215171956289834,0.220257053785717,0.225414592573868,0.230644330472202,0.235945987465250,0.241319245250294,0.246763746803798,0.252279095968757,0.257864857063589,0.263520554513175,0.269245672502630,0.275039654654401,0.280901903729233,0.286831781351579,0.292828607759967,0.298891661582857,0.305020179640481,0.311213356773146,0.317470345696486,0.323790256884076,0.330172158477869,0.336615076226841,0.343117993454229,0.349679851053751,0.356299547515114,0.362975938979164,0.369707839322947,0.376494020274986,0.383333211560984,0.390224101080214,0.397165335112778,0.404155518557911,0.411193215203480,0.418276948026807,0.425405199526899,0.432576412088166,0.439788988375669,0.447041291761895,0.454331646785080,0.461658339638999,0.469019618694186,0.476413695050466,0.483838743120690,0.491292901245497,0.498774272338951,0.506280924564807,0.513810892043182,0.521362175587379,0.528932743470522,0.536520532221727,0.544123447451410,0.551739364705383,0.559366130347294,0.567001562469006,0.574643451828413,0.582289562814228,0.589937634437199,0.597585381347206,0.605230494875692,0.612870644102763,0.620503476948407,0.628126621287106,0.635737686085219,0.643334262560384,0.650913925362262,0.658474233773817,0.666012732932407,0.673526955069859,0.681014420770724,0.688472640247859,0.695899114634501,0.703291337291929,0.710646795131823,0.717962969952412,0.725237339787475,0.732467380267226,0.739650565990148,0.746784371904763,0.753866274700369,0.760893754205708,0.767864294794583,0.774775386797333,0.781624527917188,0.788409224650396,0.795126993709089,0.801775363445819,0.808351875278672,0.814854085115884,0.821279564778882,0.827625903422644,0.833890708952285,0.840071609434801,0.846166254504825,0.852172316763347,0.858087493168273,0.863909506415738,0.869636106311106,0.875265071128524,0.880794208958001,0.886221359038912,0.891544393078866,0.896761216556889,0.901869770009860,0.906868030301180,0.911754011870646,0.916525767964508,0.921181391844709,0.925719017976353,0.930136823192383,0.934433027834571,0.938605896869844,0.942653740981037,0.946574917631207,0.950367832100585,0.954030938495344,0.957562740727331,0.960961793463961,0.964226703047482,0.967356128382838,0.970348781793416,0.973203429843927,0.975918894129774,0.978494052032215,0.980927837438710,0.983219241427842,0.985367312918236,0.987371159280924,0.989229946914677,0.990942901783765,0.992509309917736,0.993928517872787,0.995199933154319,0.996323024600329,0.997297322725331,0.998122420024500,0.998797971237777,0.999323693573725,0.999699366892946,0.999924833850901,1,0.999924833850901,0.999699366892946,0.999323693573725,0.998797971237777,0.998122420024500,0.997297322725331,0.996323024600329,0.995199933154319,0.993928517872787,0.992509309917736,0.990942901783765,0.989229946914677,0.987371159280924,0.985367312918236,0.983219241427842,0.980927837438710,0.978494052032215,0.975918894129774,0.973203429843927,0.970348781793416,0.967356128382838,0.964226703047482,0.960961793463961,0.957562740727331,0.954030938495344,0.950367832100585,0.946574917631207,0.942653740981037,0.938605896869844,0.934433027834571,0.930136823192383,0.925719017976353,0.921181391844709,0.916525767964508,0.911754011870646,0.906868030301180,0.901869770009860,0.896761216556889,0.891544393078866,0.886221359038912,0.880794208958001,0.875265071128524,0.869636106311106,0.863909506415738,0.858087493168273,0.852172316763347,0.846166254504825,0.840071609434801,0.833890708952285,0.827625903422644,0.821279564778882,0.814854085115884,0.808351875278672,0.801775363445819,0.795126993709089,0.788409224650396,0.781624527917188,0.774775386797333,0.767864294794583,0.760893754205708,0.753866274700369,0.746784371904763,0.739650565990148,0.732467380267226,0.725237339787475,0.717962969952412,0.710646795131823,0.703291337291929,0.695899114634501,0.688472640247859,0.681014420770724,0.673526955069859,0.666012732932407,0.658474233773817,0.650913925362262,0.643334262560384,0.635737686085219,0.628126621287106,0.620503476948407,0.612870644102763,0.605230494875692,0.597585381347206,0.589937634437199,0.582289562814228,0.574643451828413,0.567001562469006,0.559366130347294,0.551739364705383,0.544123447451410,0.536520532221727,0.528932743470522,0.521362175587379,0.513810892043182,0.506280924564807,0.498774272338951,0.491292901245497,0.483838743120690,0.476413695050466,0.469019618694186,0.461658339638999,0.454331646785080,0.447041291761895,0.439788988375669,0.432576412088166,0.425405199526899,0.418276948026807,0.411193215203480,0.404155518557911,0.397165335112778,0.390224101080214,0.383333211560984,0.376494020274986,0.369707839322947,0.362975938979164,0.356299547515114,0.349679851053751,0.343117993454229,0.336615076226841,0.330172158477869,0.323790256884076,0.317470345696486,0.311213356773146,0.305020179640481,0.298891661582857,0.292828607759967,0.286831781351579,0.280901903729233,0.275039654654401,0.269245672502630,0.263520554513175,0.257864857063589,0.252279095968757,0.246763746803798,0.241319245250294,0.235945987465250,0.230644330472202,0.225414592573868,0.220257053785717,0.215171956289834,0.210159504908447,0.205219867596454,0.200353175952304,0.195559525746569,0.190838977467515,0.186191556883019,0.181617255618122,0.177116031747545,0.172687810402464,0.168332484390842,0.164049914830625,0.159839931795092,0.155702334969659,0.151636894319412,0.147643350766696,0.143721416878019,0.139870777559591,0.136091090760777,0.132381988184787,0.128743076005881,0.125173935592412,0.121674124235024,0.118243175879295,0.114880601862191,0.111585891651624,0.108358513588461,0.105197915630347,0.102103526096669,0.0990747544140367,0.0961109918616499,0.0932116123159342,0.0903759729938291,0.0876034151941392,0.0848932650363573,0.0822448341963846,0.0796574206385861,0.0771303093436293,0.0746627730315699,0.0722540728796589,0.0699034592343620,0.0676101723170910,0.0653734429231685,0.0631924931135554,0.0610665368988864,0.0589947809153793,0.0569764250921886,0.0550106633098010,0.0530966840490786,0.0512336710305704,0.0494208038437357,0.0476572585657329,0.0459422083694431,0.0442748241204196,0.0426542749624655,0.0410797288915580,0.0395503533178591,0.0380653156155631,0.0366237836603505,0.0352249263542347,0.0338679141376024,0.0325519194882648,0.0312761174073554,0.0300396858919227,0.0288418063940844,0.0276816642666247,0.0265584491949310,0.0254713556151832,0.0244195831187241,0.0234023368425520,0.0224188278458950,0.0214682734728370,0.0205498977009858,0.0196629314761796,0.0188066130332503,0.0179801882028699,0.0171829107045218,0.0164140424256529,0.0156728536870719,0.0149586234946749,0.0142706397775905,0.0136081996128458,0.0129706094366715,0.0123571852425686,0.0117672527662767,0.0112001476577889,0.0106552156405711,0.0101318126581527,0.00962930500826366,0.00914706946470409,0.00868449338713837,0.00824097481901578,0.00781592257382674,0.00740875630991058,0.00701890659403844,0.00664581495400105,0.00628893392043690,0.00594772705814315,0.00562166898711538,0.00531024539356870,0.00501295303119638,0.00472929971292675,0.00445880429344256,0.00420099664273084,0.00395541761093375,0.00372161898477411,0.00349916343583111,0.00328762446094390,0.00308658631502198,0.00289564393654305,0.00271440286601900,0.00254247915771185,0.00237949928488150,0.00222510003884643,0.00207892842213892,0.00194064153603439,0.00180990646273441,0.00168640014248058,0.00156980924587551,0.00145983004168424,0.00135616826038822,0.00125853895376027,0.00116666635072691,0.00108028370978106,0.000999133168204828,0.000922965588358437,0.000851540401287862,0.000784625447899411,0.000721996817945560,0.000663438687061795,0.000608743152089792,0.000557710064917393,0.000510146865061051,0.000465868411211272,0.000424696811956460,0.000386461255895199,0.000350997841341567,0.000318149405822505,0.000287765355560641,0.000259701495130145,0.000233819857467383,0.000209988534412247,0.000188081507949999,0.000167978482317502,0.000149564717131562,0.000132730861691048,0.000117372790598282,0.000103391440839045,9.06926504543629e-05,7.91869989310889e-05,6.87896494321026e-05,5.94201929808341e-05,5.10024947086680e-05,4.34645422677190e-05,3.67382965053836e-05,3.07595444911051e-05,2.54677549797957e-05,2.08059363905017e-05,1.67204973730424e-05,1.31611100296223e-05,1.00805758527258e-05,7.43469443502669e-06};
  t_real difference = 0;
  t_int number_of_samples = sizeof(x_values) / sizeof(*x_values);
  for (t_int i = 0; i < number_of_samples; ++i)
  {
    //Test that pswf is the same as matlab calculations
    difference = std::abs(op.pswf(x_values[i], 6) - pswf_values[i]);
    CHECK( difference < 0.001 );
    //Test that kaiser_bessel is the same as matlab calculations
    difference = std::abs(op.kaiser_bessel(x_values[i], 6) - kb_values[i]);
    CHECK( difference < 0.001 );
  }
}

TEST_CASE("Measurement Operator [Gridding]", "[Gridding]") {

  /*
    Tests each kernel by gridding visibility data and a point spread function, then comparing the gridded images to the same images generated from matlab.

    So far the maximum difference between the gridded images of at166B are 0.00015% (kb), 0.1071% (pswf), and 0.0362% (guass).

    Since there is small difference between the end results, it suggests that the C++ and Matlab codes perform the same process.
    But, it is not clear why the pswf and guass kernels are not as close to the matlab versions as the kb kernel.

  */
  MeasurementOperator op;
  MeasurementOperator::vis_params uv_vis;
  t_real max;
  t_real max_diff;
  t_int over_sample;
  t_real cellsize;
  std::string kernel;
  MeasurementOperator::operator_params st;
  

  //Gridding example
  over_sample = 2;
  t_int J = 6;
  uv_vis = op.read_visibility("../data/vla/at166B.3C129.c0.vis"); // visibility data being read in
  cellsize = 0.3;
  uv_vis = op.set_cell_size(uv_vis, cellsize); // scale uv coordinates to correct pixel size and to units of 2pi
  uv_vis = op.uv_scale(uv_vis, 1024 * over_sample, 1024 * over_sample); // scale uv coordinates to units of Fourier grid size
  uv_vis = op.uv_symmetry(uv_vis); // Enforce condjugate symmetry by reflecting measurements in uv coordinates
  Vector<t_complex> point_source = uv_vis.vis * 0; point_source.setOnes();  // Creating model visibilities for point source
  Image<t_complex> psf;
  //Amount in which images are shifted relative to each other
  t_int j_shift = - 0;
  t_int i_shift = - 1;

  SECTION("Kaiser Bessel Gridding") {
    kernel = "kb";
    st = op.init_nufft2d(uv_vis.u, uv_vis.v, J, J, kernel, 1024, 1024, over_sample); // Generating gridding matrix

    psf = op.grid(point_source, st);
    max = psf.real().maxCoeff();
    psf = psf / max;
    op.writefits2d(psf.real(), "kb_psf.fits", true, false);


    Image<t_real> kb_img = op.grid(uv_vis.vis, st).real();
    max = kb_img.maxCoeff();
    kb_img = kb_img / max;
    op.writefits2d(kb_img.real(), "grid_image_real_kb_6.fits", true, false);


    Image<t_real> kb_test_image = op.readfits2d("../data/expected/gridding/at166BtestJ6kb.fits").real();
    
    max_diff = 0;
    for (t_int i = 2; i < kb_test_image.cols() - 2; ++i)
    {
      for (t_int j = 2; j < kb_test_image.rows() - 2; ++j)
      {
        if (std::abs(kb_img(j, i) - kb_test_image(j + j_shift, i + i_shift)) > max_diff)
        {
          max_diff = std::abs(kb_img(j, i) - kb_test_image(j + j_shift, i + i_shift));
        }
        if (std::abs(kb_img(j, i) - kb_test_image(j + j_shift, i + i_shift)) >= 0.03)
        {
          std::cout << i << " " << j << '\n';
        }
        CHECK( std::abs(kb_img(j, i) - kb_test_image(j + j_shift, i + i_shift)) < 0.005 );
      }
    }
    std::cout << "Percentage max difference in Kaiser Bessel gridding: " << max_diff * 100 << "%" << '\n';
  }
  SECTION("Prolate Spheroidal Wave Functon Gridding") {
    kernel = "pswf";
    st = op.init_nufft2d(uv_vis.u, uv_vis.v, J, J, kernel, 1024, 1024, over_sample); // Generating gridding matrix
    Image<t_real> pswf_img = op.grid(uv_vis.vis, st).real();
    max = pswf_img.maxCoeff();
    pswf_img = pswf_img / max;

    Image<t_real> pswf_test_image = op.readfits2d("../data/expected/gridding/at166BtestJ6pswf.fits").real();
    Image<t_real> pswf_difference = pswf_img - pswf_test_image;
    max_diff = pswf_difference.abs().maxCoeff();
    
    max_diff = 0;
    for (t_int i = 1; i < pswf_test_image.cols() - 1; ++i)
    {
      for (t_int j = 1; j < pswf_test_image.rows() - 1; ++j)
      {
        if (std::abs(pswf_img(j, i) - pswf_test_image(j + j_shift, i + i_shift)) > max_diff)
        {
          max_diff = std::abs(pswf_img(j, i) - pswf_test_image(j + j_shift, i + i_shift));
        }
        if (std::abs(pswf_img(j, i) - pswf_test_image(j + j_shift, i + i_shift)) >= 0.03)
        {
          std::cout << i << " " << j << '\n';
        }
        CHECK( std::abs(pswf_img(j, i) - pswf_test_image(j + j_shift, i + i_shift)) < 0.005 );
      }
    }
    std::cout << "Percentage max difference in Prolate Spheroidal Wave Functon gridding: " << max_diff * 100 << "%" << '\n';
  }
  SECTION("Gaussian Gridding") {
    kernel = "gauss";
    st = op.init_nufft2d(uv_vis.u, uv_vis.v, J, J, kernel, 1024, 1024, over_sample); // Generating gridding matrix
    Image<t_real> gauss_img = op.grid(uv_vis.vis, st).real();
    max = gauss_img.maxCoeff();
    gauss_img = gauss_img / max;

    Image<t_real> gauss_test_image = op.readfits2d("../data/expected/gridding/at166BtestJ6gauss.fits").real();
    Image<t_real> gauss_difference = gauss_img - gauss_test_image;
    max_diff = gauss_difference.abs().maxCoeff();
    
    max_diff = 0;
    for (t_int i = 1; i < gauss_test_image.cols() - 1; ++i)
    {
      for (t_int j = 1; j < gauss_test_image.rows() - 1; ++j)
      {
        if (std::abs(gauss_img(j, i) - gauss_test_image(j + j_shift, i + i_shift)) > max_diff)
        {
          max_diff = std::abs(gauss_img(j, i) - gauss_test_image(j + j_shift, i + i_shift));
        }
        if (std::abs(gauss_img(j, i) - gauss_test_image(j + j_shift, i + i_shift)) >= 0.03)
        {
          std::cout << i << " " << j << '\n';
        }
        CHECK( std::abs(gauss_img(j, i) - gauss_test_image(j + j_shift, i + i_shift)) < 0.005 );
      }
    }
    std::cout << "Percentage max difference in Gaussian gridding: " << max_diff * 100 << "%" << '\n';
  }  

}

TEST_CASE("Measurement Operator [Degridding]", "[Degridding]") {
  /*
    Degrids a model point source, and then compares how close the degridded visibilities are to that of a point source.

    Also generates a degridded image of M31.
  
    We find the maximum difference in visibilities is 0.001% (kb), 0.842% (pswf), and 0.056% (gauss).

    Again, the kb Kernel gives closer to the expected result. PSWF gives a result that is worse than expected.
  */
  MeasurementOperator op;
  MeasurementOperator::vis_params uv_vis;
  t_real max;
  t_real max_diff;
  t_int over_sample;
  t_real cellsize;
  std::string kernel;
  MeasurementOperator::operator_params st;
  Image<t_complex> img;
  Image<t_complex> point;
  Vector<t_complex> psf_vis;
  Image<t_complex> psf;

  SECTION("Kaiser Bessel Degridding") {
    kernel = "kb";
    over_sample = 2;
    t_int J = 6;
    uv_vis = op.read_visibility("../data/expected/degridding/M31_J6kb.vis");
    img = op.readfits2d("../data/images/M31.fits");
    uv_vis = op.uv_scale(uv_vis, img.cols() * over_sample, img.rows() * over_sample);
    st = op.init_nufft2d(uv_vis.u, -uv_vis.v, J, J, kernel, img.cols(), img.rows(), over_sample); // Calculates gridding matrix

    point = Image<t_complex>::Zero(img.cols(), img.rows()); point(floor(img.cols()/2), floor(img.rows()/2)) = 1; // Creating model of point source in image
    psf_vis = op.degrid(point, st); // Creating visibilities from model
    max = psf_vis.cwiseAbs().maxCoeff();
    psf_vis = psf_vis / max; // normalized visibilities
    psf = op.grid(psf_vis, st); // gridding model visibilities into image
    max = psf.real().maxCoeff();
    psf = psf / max;
    op.writefits2d(psf.real(), "kb_psf_M31_degridding.fits", true, false); // saving image of degridded point source


    Vector<t_complex> kb_vis = op.degrid(img, st); // visibilities of degridded model
    Image<t_complex> kb_img = op.grid(kb_vis, st); // image of degridded model
    max = kb_img.real().maxCoeff();
    kb_img = kb_img / max; // normalisation of degridded model

    op.writefits2d(kb_img.real(), "kb_test.fits", true, false);

    max = kb_vis.cwiseAbs().maxCoeff();
    kb_vis = kb_vis / max;
    max_diff = 0;

    for (int i = 0; i < psf_vis.size(); ++i)
    {
      if (std::abs(std::abs(psf_vis(i)) - 1) > max_diff)
      {
        max_diff = std::abs(std::abs(psf_vis(i)) - 1);
      }
      // checking visibilities of degridded point source
      CHECK( std::abs(std::abs(psf_vis(i)) - 1) < 0.0001);
    }
    std::cout << "Percentage max difference in Kaiser Bessel degridding: " << max_diff * 100 << "%" << '\n';
    psf_vis.setOnes();
    psf = op.grid(psf_vis, st);
    max = psf.real().maxCoeff();
    psf = psf / max;
    op.writefits2d(psf.real(), "kb_psf_M31_gridding.fits", true, false); // saving image of degridded point source
  }

  SECTION("Prolate Spheroidal Wave Functon Degridding") {
    kernel = "pswf";
    over_sample = 2;
    t_int J = 6;
    uv_vis = op.read_visibility("../data/expected/degridding/M31_J6kb.vis");
    img = op.readfits2d("../data/images/M31.fits");
    uv_vis = op.uv_scale(uv_vis, img.cols() * over_sample, img.rows() * over_sample);
    st = op.init_nufft2d(uv_vis.u, -uv_vis.v, J, J, kernel, img.cols(), img.rows(), over_sample); // Calculates gridding matrix

    point = Image<t_complex>::Zero(img.cols(), img.rows()); point(floor(img.cols()/2), floor(img.rows()/2)) = 1; // Creating model of point source in image
    psf_vis = op.degrid(point, st); // Creating visibilities from model
    max = psf_vis.cwiseAbs().maxCoeff();
    psf_vis = psf_vis / max; // normalized visibilities
    psf = op.grid(psf_vis, st); // gridding model visibilities into image
    max = psf.real().maxCoeff();
    psf = psf / max;
    op.writefits2d(psf.real(), "pswf_psf_M31_degridding.fits", true, false); // saving image of degridded point source


    Vector<t_complex> pswf_vis = op.degrid(img, st); // visibilities of degridded model
    Image<t_complex> pswf_img = op.grid(pswf_vis, st); // image of degridded model
    max = pswf_img.real().maxCoeff();
    pswf_img = pswf_img / max; // normalisation of degridded model

    op.writefits2d(pswf_img.real(), "pswf_test.fits", true, false);

    max = pswf_vis.cwiseAbs().maxCoeff();
    pswf_vis = pswf_vis / max;
    max_diff = 0;

    for (int i = 0; i < psf_vis.size(); ++i)
    {
      if (std::abs(std::abs(psf_vis(i)) - 1) > max_diff)
      {
        max_diff = std::abs(std::abs(psf_vis(i)) - 1);
      }
      // checking visibilities of degridded point source
      CHECK( std::abs(std::abs(psf_vis(i)) - 1) < 0.01);
    }
    std::cout << "Percentage max difference in Prolate Spheroidal Wave Functon degridding: " << max_diff * 100 << "%" << '\n';
    psf_vis.setOnes();
    psf = op.grid(psf_vis, st);
    max = psf.real().maxCoeff();
    psf = psf / max;
    op.writefits2d(psf.real(), "pswf_psf_M31_gridding.fits", true, false); // saving image of degridded point source
  }

  SECTION("Gaussian Degridding") {
    kernel = "gauss";
    over_sample = 2;
    t_int J = 6;
    uv_vis = op.read_visibility("../data/expected/degridding/M31_J6kb.vis");
    img = op.readfits2d("../data/images/M31.fits");
    uv_vis = op.uv_scale(uv_vis, img.cols() * over_sample, img.rows() * over_sample);
    st = op.init_nufft2d(uv_vis.u, -uv_vis.v, J, J, kernel, img.cols(), img.rows(), over_sample); // Calculates gridding matrix

    point = Image<t_complex>::Zero(img.cols(), img.rows()); point(floor(img.cols()/2), floor(img.rows()/2)) = 1; // Creating model of point source in image
    psf_vis = op.degrid(point, st); // Creating visibilities from model
    max = psf_vis.cwiseAbs().maxCoeff();
    psf_vis = psf_vis / max; // normalized visibilities
    psf = op.grid(psf_vis, st); // gridding model visibilities into image
    max = psf.real().maxCoeff();
    psf = psf / max;
    op.writefits2d(psf.real(), "gauss_psf_M31_degridding.fits", true, false); // saving image of degridded point source


    Vector<t_complex> gauss_vis = op.degrid(img, st); // visibilities of degridded model
    Image<t_complex> gauss_img = op.grid(gauss_vis, st); // image of degridded model
    max = gauss_img.real().maxCoeff();
    gauss_img = gauss_img / max; // normalisation of degridded model

    op.writefits2d(gauss_img.real(), "gauss_test.fits", true, false);

    max = gauss_vis.cwiseAbs().maxCoeff();
    gauss_vis = gauss_vis / max;
    max_diff = 0;

    for (int i = 0; i < psf_vis.size(); ++i)
    {
      if (std::abs(std::abs(psf_vis(i)) - 1) > max_diff)
      {
        max_diff = std::abs(std::abs(psf_vis(i)) - 1);
      }
      // checking visibilities of degridded point source
      CHECK( std::abs(std::abs(psf_vis(i)) - 1) < 0.01);
    }
    std::cout << "Percentage max difference in Gaussian degridding: " << max_diff * 100 << "%" << '\n';
    psf_vis.setOnes();
    psf = op.grid(psf_vis, st);
    max = psf.real().maxCoeff();
    psf = psf / max;
    op.writefits2d(psf.real(), "gauss_psf_M31_gridding.fits", true, false); // saving image of degridded point source
  }
}