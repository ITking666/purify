#include "purify/operators.h"
#include "purify/config.h"
#include <iostream>
#include "catch.hpp"
#include "purify/MeasurementOperator.h"
#include "purify/compact_operators.h"
#include "purify/directories.h"
#include "purify/kernels.h"
#include "purify/logging.h"
#include "purify/types.h"

using namespace purify;
using namespace purify::notinstalled;

TEST_CASE("Operators") {
  // sopt::logging::set_level("debug");
  // purify::logging::set_level("debug");
  const t_uint M = 10;
  const t_real oversample_ratio = 2;
  const t_uint imsizex = 16;
  const t_uint imsizey = 16;
  const t_uint ftsizev = std::floor(imsizey * oversample_ratio);
  const t_uint ftsizeu = std::floor(imsizex * oversample_ratio);
  const t_uint Ju = 4;
  const t_uint Jv = 4;
  const t_uint Jt_complexv = 4;
  const t_uint power_iters = 100;
  const t_real power_tol = 1e-9;
  const kernels::kernel kernel = kernels::kernel::kb;
  const auto ft_plan = operators::fftw_plan::measure;
  const std::string &weighting_type = "natural";
  const t_real R = 0;
  std::vector<t_real> u= { 0.782543,
 0.198146,
 0.239762,
-0.326915,
-0.467453,
-0.482006,
 0.931636,
0.0116838,
 0.370312,
-0.167604};
  std::vector<t_real> v  ={ 0.947061,
-0.737768,
  0.32853,
-0.390088,
-0.208766,
-0.737049,
 0.420537,
-0.035122,
-0.295394,
-0.689123};
  utilities::vis_params uv_vis;
  uv_vis.u = Vector<t_real>::Map(u.data(),u.size());
  uv_vis.v = Vector<t_real>::Map(v.data(),v.size());
  uv_vis.w = uv_vis.u * 0.;
  uv_vis.weights = Vector<t_complex>::Random(M);
  uv_vis.vis = Vector<t_complex>::Random(M);
  uv_vis.units = utilities::vis_units::pixels;
  MeasurementOperator expected_op(uv_vis, Ju, Jv, "kb", imsizex, imsizey, power_iters,
                                  oversample_ratio);
  std::function<t_real(t_real)> kbu, kbv, ftkbu, ftkbv;
  std::tie(kbu, kbv, ftkbu, ftkbv)
      = create_kernels(kernel, Ju, Jv, imsizey, imsizex, oversample_ratio);
  std::function<t_complex(t_real, t_real, t_real)> kernelw
      = projection_kernels::w_projection_kernel_approx(1, 1, imsizex, imsizey, oversample_ratio);
  SECTION("Gridding") {
    sopt::OperatorFunction<Vector<t_complex>> directG, indirectG;
    std::tie(directG, indirectG) = operators::init_gridding_matrix_2d<Vector<t_complex>>(
        uv_vis.u, uv_vis.v, uv_vis.w, Vector<t_complex>::Constant(M, 1.), imsizey, imsizex,
        oversample_ratio, kbv, kbu, kernelw, Ju, Jv);
    const Vector<t_complex> direct_input = Vector<t_complex>::Random(ftsizev * ftsizeu);
    Vector<t_complex> direct_output;
    directG(direct_output, direct_input);
    CHECK(direct_output.size() == M);
    std::vector<t_complex> expected_direct = 
  {t_complex(0.456098,-0.23967),
  t_complex(0.793379,-0.756064),
  t_complex(1.11215,-0.0721311),
   t_complex(1.23493,-0.576418),
   t_complex(1.14597,-0.468352),
   t_complex(1.22425,-0.475148),
  t_complex(0.373513,-0.331239),
   t_complex(1.22306,-0.398444),
   t_complex(0.91409,-0.572678),
   t_complex(1.12546,-0.693181)};
    CHECK(direct_output.size() == expected_direct.size());
    CAPTURE(expected_direct);
    CAPTURE(direct_output);
    REQUIRE(direct_output.isApprox(Vector<t_complex>::Map(expected_direct.data(),expected_direct.size()), 1e-5));
    std::vector<t_complex>  indirect_input = { t_complex(0.456098,-0.23967),
 t_complex(0.793379,-0.756064),
 t_complex(1.11215,-0.0721311),
 t_complex(1.23493,-0.576418),
 t_complex(1.14597,-0.468352),
 t_complex(1.22425,-0.475148),
 t_complex(0.373513,-0.331239),
 t_complex(1.22306,-0.398444),
 t_complex(0.91409,-0.572678),
 t_complex(1.12546,-0.693181)};
    Vector<t_complex> indirect_output;
    indirectG(indirect_output, Vector<t_complex>::Map(indirect_input.data(), indirect_input.size()));
    CAPTURE(indirect_output.head(5));
    CHECK(indirect_output.size() == ftsizev * ftsizeu);
    const std::vector<t_complex> expected_indirect = {
         t_complex(6.37885,-2.80185),
         t_complex(-2.42815,1.20672),
       t_complex(0.141195,-0.101078),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
      t_complex(0.104408,-0.0440356),
         t_complex(-2.86387,1.23362),
        t_complex(-1.66889,0.545031),
        t_complex(1.24326,-0.572858),
      t_complex(-0.150217,0.0995898),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
    t_complex(-0.0114922,0.00482809),
       t_complex(0.443518,-0.147439),
      t_complex(0.0860588,-0.037256),
      t_complex(-0.140193,0.0730059),
     t_complex(0.0234459,-0.0134069),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
  t_complex(-0.00451387,0.000825655),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
       t_complex(0.419086,-0.257281),
      t_complex(-0.102268,0.0778517),
   t_complex(0.00124568,-0.00106096),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
    t_complex(0.0100687,-0.00415125),
       t_complex(-0.235045,0.117713),
         t_complex(-4.69428,2.55711),
        t_complex(1.28427,-0.812958),
     t_complex(-0.0281708,0.0205301),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
                      t_complex(0,0),
      t_complex(-0.100952,0.0423264),
         t_complex(2.49945,-1.19002)};
    CAPTURE(Vector<t_complex>::Map(expected_indirect.data(), expected_indirect.size()).head(5));
    CAPTURE((indirect_output - Vector<t_complex>::Map(expected_indirect.data(),expected_indirect.size())).head(5));
    REQUIRE(indirect_output.isApprox(Vector<t_complex>::Map(expected_indirect.data(),expected_indirect.size()), 1e-5));
  }
  SECTION("Zero Padding") {
    const Image<t_complex> S
        = details::init_correction2d(oversample_ratio, imsizey, imsizex, ftkbu, ftkbv, 0, 0, 0);
    CHECK(imsizex == S.cols());
    CHECK(imsizey == S.rows());
    CHECK(S.cols() == expected_op.S.cols());
    CHECK(S.rows() == expected_op.S.rows());
    INFO(S(0) / expected_op.S(0));
    INFO(S(5) / expected_op.S(5));
    REQUIRE(S.real().isApprox(expected_op.S, 1e-4));
    sopt::OperatorFunction<Vector<t_complex>> directZ, indirectZ;
    std::tie(directZ, indirectZ)
        = operators::init_zero_padding_2d<Vector<t_complex>>(S, oversample_ratio);
    const Vector<t_complex> direct_input = Vector<t_complex>::Random(imsizex * imsizey);
    Vector<t_complex> direct_output;
    directZ(direct_output, direct_input);
    CHECK(direct_output.size() == ftsizeu * ftsizev);
    const Vector<t_complex> indirect_input = Vector<t_complex>::Random(ftsizeu * ftsizev);
    Vector<t_complex> indirect_output;
    indirectZ(indirect_output, indirect_input);
    CHECK(indirect_output.size() == imsizex * imsizey);
  }
  SECTION("FFT") {
    sopt::OperatorFunction<Vector<t_complex>> directFFT, indirectFFT;
    std::tie(directFFT, indirectFFT)
        = operators::init_FFT_2d<Vector<t_complex>>(imsizey, imsizex, oversample_ratio, ft_plan);
    const Vector<t_complex> direct_input = Vector<t_complex>::Random(ftsizev * ftsizeu);
    Vector<t_complex> direct_output;
    directFFT(direct_output, direct_input);
    CHECK(direct_output.size() == ftsizeu * ftsizev);
    const Vector<t_complex> indirect_input = Vector<t_complex>::Random(ftsizev * ftsizeu);
    Vector<t_complex> indirect_output;
    indirectFFT(indirect_output, indirect_input);
    CHECK(indirect_output.size() == ftsizev * ftsizeu);
    Vector<t_complex> inverse_check;
    Vector<t_complex> buff;
    directFFT(buff, direct_input);
    indirectFFT(inverse_check, buff);
    CHECK(inverse_check.isApprox(direct_input, 1e-4));
  }
  SECTION("Weights") {
    MeasurementOperator weighted_expected_op(uv_vis, Ju, Jv, "kb", imsizex, imsizey, power_iters,
                                             oversample_ratio, 1, 1, "natural", 0);
    sopt::OperatorFunction<Vector<t_complex>> directW, indirectW;
    std::tie(directW, indirectW)
        = purify::operators::init_weights_<Vector<t_complex>>(uv_vis.weights);
    const Vector<t_complex> direct_input = Vector<t_complex>::Random(M);
    Vector<t_complex> direct_output;
    directW(direct_output, direct_input);
    CHECK(direct_output.size() == M);
    const Vector<t_complex> expected_direct = weighted_expected_op.W.array() * direct_input.array();
    CHECK(expected_direct.isApprox(direct_output, 1e-4));
    const Vector<t_complex> indirect_input = Vector<t_complex>::Random(M);
    Vector<t_complex> indirect_output;
    indirectW(indirect_output, indirect_input);
    CHECK(indirect_output.size() == M);
    const Vector<t_complex> expected_indirect
        = weighted_expected_op.W.conjugate().array() * indirect_input.array();
    CHECK(expected_indirect.isApprox(indirect_output, 1e-4));
  }
  SECTION("Create Weighted Measurement Operator") {
    MeasurementOperator weighted_expected_op(uv_vis, Ju, Jv, "kb", imsizex, imsizey, power_iters,
                                             oversample_ratio, 1, 1, "natural");
    const auto measure_op = measurementoperator::init_degrid_operator_2d<Vector<t_complex>>(
        uv_vis.u, uv_vis.v, uv_vis.w, uv_vis.weights, imsizey, imsizex, oversample_ratio,
        power_iters, power_tol, kernel, Ju, Jv, ft_plan);
    const Vector<t_complex> direct_input = Vector<t_complex>::Random(imsizex * imsizey);
    const Vector<t_complex> direct_output = *measure_op * direct_input;
    CHECK(direct_output.size() == M);
    const Vector<t_complex> indirect_input = Vector<t_complex>::Random(M);
    const Vector<t_complex> indirect_output = measure_op->adjoint() * indirect_input;
    CHECK(indirect_output.size() == imsizex * imsizey);
    SECTION("Power Method") {
      auto op_norm = details::power_method<Vector<t_complex>>(
          *measure_op, power_iters, power_tol, Vector<t_complex>::Random(imsizex * imsizey));
      CHECK(std::abs(op_norm - 1.) < power_tol);
    }
    SECTION("Degrid") {
      const Vector<t_complex> input = Vector<t_complex>::Random(imsizex * imsizey);
      const Image<t_complex> input_image = Image<t_complex>::Map(input.data(), imsizey, imsizex);
      const Vector<t_complex> expected_output = weighted_expected_op.degrid(input_image);
      const Vector<t_complex> actual_output = *measure_op * input;
      CHECK(expected_output.size() == actual_output.size());
      CHECK(actual_output.isApprox(
          expected_output / std::sqrt(imsizex * imsizey * oversample_ratio * oversample_ratio),
          1e-4));
    }
    SECTION("Grid") {
      const Vector<t_complex> input = Vector<t_complex>::Random(M);
      const Vector<t_complex> expected_output
          = Image<t_complex>::Map(weighted_expected_op.grid(input).data(), imsizex * imsizey, 1);
      const Vector<t_complex> actual_output = measure_op->adjoint() * input;
      CHECK(expected_output.size() == actual_output.size());
      CHECK(actual_output.isApprox(
          expected_output * std::sqrt(imsizex * imsizey * oversample_ratio * oversample_ratio),
          1e-4));
    }
  }

  SECTION("Create Weighted Compact Measurement Operator") {
    const auto measure_op = measurementoperator::init_degrid_operator_2d<Vector<t_complex>>(
        uv_vis.u, uv_vis.v, uv_vis.w, uv_vis.weights, imsizey, imsizex, oversample_ratio,
        power_iters, power_tol, kernel, Ju, Jv, ft_plan);
    const auto phiTphi = operators::init_grid_degrid_operator_2d<Vector<t_complex>>(
        uv_vis.u, uv_vis.v, uv_vis.w, uv_vis.weights, imsizey, imsizex, oversample_ratio,
        power_iters, power_tol, kernel, Ju, Jv, ft_plan);
    const auto id = [](Vector<t_complex> &out, const Vector<t_complex> &in) { out = in; };
    const Vector<t_complex> direct_input = Vector<t_complex>::Random(imsizex * imsizey);
    const Vector<t_complex> direct_output = measure_op->adjoint()(*measure_op * direct_input);
    auto const phiTphi_op = sopt::LinearTransform<Vector<t_complex>>({phiTphi, id});
    CHECK(direct_output.size() == imsizex * imsizey);
    SECTION("Power Method") {
      auto op_norm = details::power_method<Vector<t_complex>>(
          phiTphi_op, power_iters, power_tol, Vector<t_complex>::Random(imsizex * imsizey));
      CHECK(std::abs(op_norm - 1.) < power_tol);
    }
    SECTION("operation") {
      const Vector<t_complex> input = Vector<t_complex>::Random(imsizex * imsizey);
      const Vector<t_complex> expected_output = measure_op->adjoint()(*measure_op * direct_input);
      const Vector<t_complex> actual_output = phiTphi_op * direct_input;

      CHECK(expected_output.size() == actual_output.size());
      CHECK(actual_output.isApprox(expected_output, 1e-4));
    }
  }

  SECTION("Create convolution operator") {
    const auto measure_op = measurementoperator::init_degrid_operator_2d<Vector<t_complex>>(
        uv_vis.u, uv_vis.v, uv_vis.w, uv_vis.weights, imsizey, imsizex, oversample_ratio,
        power_iters, power_tol, kernel, Ju, Jv, ft_plan);
    const auto phiTphi
        = operators::init_psf_convolve_2d<Vector<t_complex>>(measure_op, imsizey, imsizex);
    const auto id = [](Vector<t_complex> &out, const Vector<t_complex> &in) { out = in; };
    const Vector<t_complex> direct_input = Vector<t_complex>::Random(imsizex * imsizey);
    auto const phiTphi_op = sopt::LinearTransform<Vector<t_complex>>({phiTphi, id});
    SECTION("Power Method") {
      auto op_norm = details::power_method<Vector<t_complex>>(
          phiTphi_op, power_iters, power_tol, Vector<t_complex>::Random(imsizex * imsizey));
      CHECK(std::abs(op_norm - 1.) < power_tol);
    }
  }
}
